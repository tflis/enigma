//! Main binary entry point for enigmaservice implementation.

#![allow(missing_docs)]

extern crate crypt_config;
extern crate enigmaservice;

#[macro_use] extern crate log;

use std::path::PathBuf;

use clap::{App, Arg};
use crypt_config::config::SyncedConfig;

mod server;

/// Create custom server, wire it to the autogenerated router,
/// and pass it to the web server.
#[tokio::main]
async fn main() {
    env_logger::init();

    let matches = App::new("server")
        .arg(Arg::with_name("https")
            .long("https")
            .help("Whether to use HTTPS or not"))
        .get_matches();

    let addr = "0.0.0.0:3000";

    let path = PathBuf::from("/config/config.json");
    let config = SyncedConfig::new(path);

    info!("Server is listening on {}", addr);
    server::create(addr, config, matches.is_present("https")).await;
}
